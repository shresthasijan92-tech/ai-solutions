/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - Services: /services/{serviceId}
 * - Projects: /projects/{projectId}
 * - Articles: /articles/{articleId}
 * - Gallery Items: /gallery/{galleryItemId}
 * - Events: /events/{eventId}
 * - Careers: /careers/{careerId}
 * - Feedback: /feedback/{feedbackId} - Contains an 'approved' field to determine if the feedback is public
 * - Homepage Sections: /homepageSections/{homepageSectionId}
 * - Admin Roles: /roles_admin/{userId}
 *
 * Key Security Decisions:
 * - Administrative access to manage core data (services, projects, articles, etc.) is controlled by the presence of a document in the `/roles_admin/{userId}` collection.
 * - The `Feedback` collection is publicly listable, but only 'approved' feedback should be displayed in the UI.  Write access to `Feedback` and all other collections requires admin privileges.
 * - Listing users is explicitly disallowed.
 *
 * Denormalization for Authorization:
 * - Admin status is checked by verifying the existence of a document in the `/roles_admin/{userId}` collection, avoiding the need to store admin UIDs directly in user documents or use `get()` calls.
 *
 * Structural Segregation:
 * - Public testimonials are managed within the `Feedback` collection using the `approved` field. Only approved feedback is intended to be displayed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin, determined by the existence of a document in /roles_admin/{userId}.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /services/{serviceId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing service details.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /projects/{projectId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing project details.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /articles/{articleId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing article details.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /gallery/{galleryItemId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing gallery item details.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /events/{eventId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing event details.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /careers/{careerId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing career details.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read access to all feedback entries but restricts write access to admins only.
     * @path /feedback/{feedbackId}
     * @allow (list) - Anyone can list feedback entries.
     * @allow (create, update, delete) - Only admins can create, update, or delete feedback entries.
     * @deny (create) - If the user is not an admin.
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants or denies permissions based on whether the user is an admin.
     * @path /homepageSections/{homepageSectionId}
     * @allow (create) - If the user is an admin.
     * @deny (create) - If the user is not an admin.
     * @principle Enforces role-based access control for managing homepage section configurations.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document under /roles_admin/{userId}. Allows only the user themselves to create their admin role.
     * @path /roles_admin/{userId}
     * @allow (create) - If the request.auth.uid matches the userId.
     * @deny (create) - If the request.auth.uid does not match the userId.
     * @principle Enforces self-creation of admin roles and restricts modifications to admins only.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if false;
    }
  }
}