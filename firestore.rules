/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - Top-level collections: `/services`, `/projects`, `/articles`, `/gallery`, `/events`, `/careers`, `/feedback`, `/homepageSections`, `/roles_admin`.
 * - All collections are secured based on the admin role.
 *
 * Key Security Decisions:
 * - Listing of all collections is generally allowed to all users.
 * - Administrative access is granted to users who have a corresponding document in the `/roles_admin/{userId}` collection.
 * - The `approved` field in the `/feedback` collection controls which feedback entries are publicly visible.
 *
 * Denormalization for Authorization:
 * - Admin status is denormalized by checking for the existence of a document in `/roles_admin/{userId}`. This avoids the need for complex queries or joins in the security rules.
 *
 * Structural Segregation:
 * - Publicly accessible data (e.g., approved testimonials) and admin-controlled data are stored in separate collections, allowing for more granular access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has admin privileges based on the existence of a document in the /roles_admin collection.
     * @path /roles_admin/{userId}
     * @allow if get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.exists()
     * @deny if request.auth == null
     * @principle Database-Based Access Control (DBAC).
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Services collection: Allows read access to all, write access only to admins.
     * @path /services/{serviceId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Projects collection: Allows read access to all, write access only to admins.
     * @path /projects/{projectId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Articles collection: Allows read access to all, write access only to admins.
     * @path /articles/{articleId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Gallery collection: Allows read access to all, write access only to admins.
     * @path /gallery/{galleryItemId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Events collection: Allows read access to all, write access only to admins.
     * @path /events/{eventId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Careers collection: Allows read access to all, write access only to admins.
     * @path /careers/{careerId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Feedback collection: Allows read access to all. Create allowed for all signed in users. Update and delete access only to admins.  'approved' field controls visibility.
     * @path /feedback/{feedbackId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny create: if !isSignedIn();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control with public read and conditional create access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description HomepageSections collection: Allows read access to all, write access only to admins.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description AdminUser collection: Only admins can create/update/delete admin users.  Read allowed to anyone.
     * @path /roles_admin/{userId}
     * @allow get, list: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @deny create: if !isAdmin();
     * @deny update: if !isAdmin();
     * @deny delete: if !isAdmin();
     * @principle Role-based access control with public read access for admin users.
     */
    match /roles_admin/{userId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Testimonials collection: Allows read access to all.
     * @path /testimonials
     * @allow list: if true;
     * @allow get: if true;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Public read access.
     */
    match /testimonials {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}