/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - Top-level collections: `/services`, `/projects`, `/articles`, `/gallery`, `/events`, `/careers`, `/feedback`, `/homepageSections`, `/roles_admin`.
 * - Each document in these collections is identified by a unique ID.
 *
 * Key Security Decisions:
 * - Admin Privileges: Users with a document in `/roles_admin/{userId}` are considered administrators and have full access to create, read, update, and delete operations on all collections.
 * - Public Read Access: Read access is generally public for all collections to allow for easy data retrieval without authentication.
 * - Restricted Writes: Write access is strictly controlled and limited to administrators only.
 * - Feedback Approval: The 'approved' field in the `/feedback` collection is intended to control which feedback items are publicly displayed, but this is not enforced in the rules.
 * - No User Listing: Listing of documents in `/roles_admin` is denied to prevent unauthorized discovery of admin users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin access to services.
     * @path /services/{serviceId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new service.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new service.
     * @principle Enforces role-based access control.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to projects.
     * @path /projects/{projectId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new project.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new project.
     * @principle Enforces role-based access control.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to articles.
     * @path /articles/{articleId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new article.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new article.
     * @principle Enforces role-based access control.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to gallery items.
     * @path /gallery/{galleryItemId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new gallery item.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new gallery item.
     * @principle Enforces role-based access control.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to events.
     * @path /events/{eventId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new event.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new event.
     * @principle Enforces role-based access control.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to careers.
     * @path /careers/{careerId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new career.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new career.
     * @principle Enforces role-based access control.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new feedback.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new feedback.
     * @principle Enforces role-based access control.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to homepage sections.
     * @path /homepageSections/{homepageSectionId}
     * @allow (create) User with document in /roles_admin/{uid} creates a new homepage section.
     * @deny (create) User without document in /roles_admin/{uid} attempts to create a new homepage section.
     * @principle Enforces role-based access control.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of this document.  No listing allowed.
     * @path /roles_admin/{userId}
     * @allow (create) User's auth UID matches the userId.
     * @deny (create) User's auth UID does not match the userId.
     * @principle Enforces role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}