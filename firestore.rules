/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model where read access is generally public,
 *              and write access is restricted to admin users.
 *
 * Data Structure:
 * - Top-level collections (services, projects, articles, gallery, events, careers, testimonials, homepageSections)
 *   store public data.
 * - Admin status is determined by the presence of a document in `/roles_admin/{userId}`.
 *
 * Key Security Decisions:
 * - Public read access to all top-level collections.
 * - Write access to all top-level collections restricted to admins.
 * - Users can create testimonials but can't edit or delete.
 * - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    match /services/{serviceId} {
      /**
       * @description Allows public read access to service details, and restricts write access to admins.
       * @path /services/{serviceId}
       * @allow (get, list) - Any user can read service details.
       * @allow (create, update, delete) - Admin user can create, update, or delete service details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete service details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /projects/{projectId} {
      /**
       * @description Allows public read access to project details, and restricts write access to admins.
       * @path /projects/{projectId}
       * @allow (get, list) - Any user can read project details.
       * @allow (create, update, delete) - Admin user can create, update, or delete project details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete project details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /articles/{articleId} {
      /**
       * @description Allows public read access to article details, and restricts write access to admins.
       * @path /articles/{articleId}
       * @allow (get, list) - Any user can read article details.
       * @allow (create, update, delete) - Admin user can create, update, or delete article details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete article details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /gallery/{galleryItemId} {
      /**
       * @description Allows public read access to gallery item details, and restricts write access to admins.
       * @path /gallery/{galleryItemId}
       * @allow (get, list) - Any user can read gallery item details.
       * @allow (create, update, delete) - Admin user can create, update, or delete gallery item details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete gallery item details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /events/{eventId} {
      /**
       * @description Allows public read access to event details, and restricts write access to admins.
       * @path /events/{eventId}
       * @allow (get, list) - Any user can read event details.
       * @allow (create, update, delete) - Admin user can create, update, or delete event details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete event details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /careers/{careerId} {
      /**
       * @description Allows public read access to career details, and restricts write access to admins.
       * @path /careers/{careerId}
       * @allow (get, list) - Any user can read career details.
       * @allow (create, update, delete) - Admin user can create, update, or delete career details.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete career details.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /testimonials/{testimonialId} {
      /**
       * @description Allows public read access to testimonials. Allows any signed-in user to create a testimonial.
       *              Restricts update and delete access to admins only.
       * @path /testimonials/{testimonialId}
       * @allow (get, list) - Any user can read testimonials.
       * @allow (create) - Any signed-in user can create a testimonial.
       * @allow (update, delete) - Admin user can update or delete testimonials.
       * @deny (update, delete) - Non-admin user cannot update or delete testimonials.
       * @principle Public read, user-created with admin control.
       */
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isAdmin();
    }

    match /homepageSections/{homepageSectionId} {
      /**
       * @description Allows public read access to homepage section configurations, and restricts write access to admins.
       * @path /homepageSections/{homepageSectionId}
       * @allow (get, list) - Any user can read homepage section configurations.
       * @allow (create, update, delete) - Admin user can create, update, or delete homepage section configurations.
       * @deny (create, update, delete) - Non-admin user cannot create, update, or delete homepage section configurations.
       * @principle Public read, admin-only writes.
       */
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    match /roles_admin/{userId} {
      /**
       * @description Restricts read and write access to the admin role documents. Only an admin can manage admin roles.
       * @path /roles_admin/{userId}
       * @allow (get, list, create, update, delete) - Only admins can manage admin roles.
       * @deny (get, list, create, update, delete) - Non-admin user cannot manage admin roles.
       * @principle Admin-only access.
       */
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }
  }
}