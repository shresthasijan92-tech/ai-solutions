/**
 * @fileoverview Firestore Security Rules for AISolutions Hub.
 *
 * Core Philosophy:
 * This ruleset provides public read access to all top-level collections while restricting write access to administrative users.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections representing core application data, including services, projects, articles, gallery items, events, careers, testimonials, and homepage sections. Admin user roles are stored in the /roles_admin/{userId} collection.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections for wider accessibility.
 * - Write access (create, update, delete) is strictly limited to administrative users to protect data integrity.
 * - Testimonials can be created by any signed-in user, allowing for public feedback submission, but only admins can modify them.
 * - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * This ruleset depends on the existence of documents in `/roles_admin/{userId}` to grant admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /services/{serviceId} {
      /**
       * @description Allows anyone to read service details. Only admins can create, update, or delete services.
       * @path /services/{serviceId}
       * @allow (get, list) - Any user can read service details.
       * @allow (create, update, delete) - An admin user can create, update, or delete service details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete service details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /projects/{projectId} {
      /**
       * @description Allows anyone to read project details. Only admins can create, update, or delete projects.
       * @path /projects/{projectId}
       * @allow (get, list) - Any user can read project details.
       * @allow (create, update, delete) - An admin user can create, update, or delete project details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete project details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /articles/{articleId} {
      /**
       * @description Allows anyone to read article details. Only admins can create, update, or delete articles.
       * @path /articles/{articleId}
       * @allow (get, list) - Any user can read article details.
       * @allow (create, update, delete) - An admin user can create, update, or delete article details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete article details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /gallery/{galleryItemId} {
      /**
       * @description Allows anyone to read gallery item details. Only admins can create, update, or delete gallery items.
       * @path /gallery/{galleryItemId}
       * @allow (get, list) - Any user can read gallery item details.
       * @allow (create, update, delete) - An admin user can create, update, or delete gallery item details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete gallery item details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /events/{eventId} {
      /**
       * @description Allows anyone to read event details. Only admins can create, update, or delete events.
       * @path /events/{eventId}
       * @allow (get, list) - Any user can read event details.
       * @allow (create, update, delete) - An admin user can create, update, or delete event details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete event details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /careers/{careerId} {
      /**
       * @description Allows anyone to read career details. Only admins can create, update, or delete careers.
       * @path /careers/{careerId}
       * @allow (get, list) - Any user can read career details.
       * @allow (create, update, delete) - An admin user can create, update, or delete career details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete career details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /testimonials/{testimonialId} {
      /**
       * @description Allows anyone to read testimonials. Allows any signed-in user to create testimonials, but only admins can update or delete them.
       * @path /testimonials/{testimonialId}
       * @allow (get, list) - Any user can read testimonial details.
       * @allow (create) - Any signed-in user can create testimonial details.
       * @allow (update, delete) - An admin user can update or delete testimonial details.
       * @deny (update, delete) - A non-admin user cannot update or delete testimonial details.
       * @principle Public read access, user-created testimonials, admin-only modification and deletion.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /homepageSections/{homepageSectionId} {
      /**
       * @description Allows anyone to read homepage section details. Only admins can create, update, or delete homepage sections.
       * @path /homepageSections/{homepageSectionId}
       * @allow (get, list) - Any user can read homepage section details.
       * @allow (create, update, delete) - An admin user can create, update, or delete homepage section details.
       * @deny (create, update, delete) - A non-admin user cannot create, update, or delete homepage section details.
       * @principle Public read access, admin-only write access.
       */
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /roles_admin/{userId} {
      /**
       * @description Allows only the user themselves to create their admin role document. Only admins can update or delete admin role documents.
       * @path /roles_admin/{userId}
       * @allow (get, list) - Any user can read whether an admin exists
       * @allow (create) - A user can create their own admin role document if their UID matches the document ID.
       * @allow (update, delete) - Only an admin user can update or delete admin role documents.
       * @deny (create) - A user cannot create an admin role document for another user.
       * @deny (update, delete) - A non-admin user cannot update or delete admin role documents.
       * @principle Owner-only creation, admin-only modification and deletion.
       */
      allow get: if true;
      allow list: if isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}