/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a role-based access control model, primarily using the /roles_admin/{userId} collection to grant administrative privileges.
 * Data is organized into top-level collections (e.g., /services, /projects, /articles), with each document identified by a unique ID.
 * @data-structure The data model consists of several top-level collections:
 *   - /services/{serviceId}: Stores service details.
 *   - /projects/{projectId}: Stores project details.
 *   - /articles/{articleId}: Stores article details.
 *   - /gallery/{galleryItemId}: Stores gallery items.
 *   - /events/{eventId}: Stores event details.
 *   - /careers/{careerId}: Stores career opportunities.
 *   - /feedback/{feedbackId}: Stores user feedback, including an 'approved' flag.
 *   - /homepageSections/{homepageSectionId}: Stores configurations for homepage sections.
 *   - /roles_admin/{userId}: Stores admin user roles.  The existence of a document at this path grants admin privileges to the specified user.
 * @key-security-decisions
 *   - Admin Privileges: Admin privileges are granted based on the presence of a document in the `/roles_admin/{userId}` collection.
 *   - Public Read Access: The ruleset does not grant public read access to any collection, except for the list operation on the feedback collection.
 *   - No User Listing: Listing users is disallowed.
 * @denormalization-for-authorization Admin status is checked by verifying the existence of a document in the /roles_admin/{userId} collection.  This avoids querying user documents for roles.
 * @structural-segregation Publicly accessible data (approved testimonials) is segregated using the `approved` flag in the `/feedback` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user with the given UID has admin privileges.
     * @param {string} userId The UID of the user to check.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/roles_admin/$(userId));
    }

    /**
     * @description Determines if the current user is an admin.
     * @return {boolean} True if the current user is an admin, false otherwise.
     */
    function isCurrentUserAdmin() {
      return isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Rule set for the /services collection.
     * @path /services/{serviceId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /projects collection.
     * @path /projects/{projectId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /articles collection.
     * @path /articles/{articleId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /gallery collection.
     * @path /gallery/{galleryItemId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /gallery/{galleryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /events collection.
     * @path /events/{eventId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /careers collection.
     * @path /careers/{careerId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /careers/{careerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /feedback collection.
     * @path /feedback/{feedbackId}
     * @allow get, list: Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations, public read access.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /homepageSections collection.
     * @path /homepageSections/{homepageSectionId}
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for write operations.
     */
    match /homepageSections/{homepageSectionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isCurrentUserAdmin();
      allow update: if isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    /**
     * @description Rule set for the /roles_admin collection.
     * @path /roles_admin/{userId}
     * @allow get: if isCurrentUserAdmin();
     * @allow list: if false;
     * @allow create: if isSignedIn() && request.auth.uid == userId;
     * @allow update: if false;
     * @allow delete: if isCurrentUserAdmin();
     * @principle Allows admins to read and delete admin roles. Allows a user to create their own admin role document.
     */
    match /roles_admin/{userId} {
      allow get: if isCurrentUserAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if false;
      allow delete: if isCurrentUserAdmin();
    }

        /**
     * @description Rule set for the /jobs collection.
     * @path /jobs
     * @allow get, list: Public read access.
     */
    match /jobs {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}