/**
 * @file Firebase Security Rules for AISolutions Hub.
 *
 * @core_philosophy This ruleset enforces role-based access control, primarily managed through the `/roles_admin/{userId}` collection.
 *   Existence of a document in `/roles_admin/{userId}` grants admin privileges. Public listing is enabled for certain collections like 'testimonials' with conditions.
 *
 * @data_structure The database is structured into top-level collections such as `services`, `projects`, `articles`, `gallery`, `events`, `careers`, `feedback`, and `homepageSections`.
 *   Admin users are managed in the `/roles_admin` collection.
 *
 * @key_security_decisions
 *   - Listing of any collection requires authentication.
 *   - Write access to all collections is restricted to admin users only.
 *   - The `feedback` collection allows public listing, but writing is limited to admins.
 *   - Role-based access is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * @denormalization_for_authorization Admin status is determined by checking for the existence of a document in the `/roles_admin/{userId}` collection,
 *   avoiding the need to store admin roles directly on user documents. This simplifies the security rules and improves performance.
 *
 * @structural_segregation Approved testimonials are managed via the `approved` flag in the `feedback` collection, allowing public listing of approved feedback.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires user authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of their document in /roles_admin/{userId}.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implements role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants access to services collection.
     * @path /services/{serviceId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for service management.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to projects collection.
     * @path /projects/{projectId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for project management.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to articles collection.
     * @path /articles/{articleId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for article management.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to gallery collection.
     * @path /gallery/{galleryItemId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for gallery management.
     */
    match /gallery/{galleryItemId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to events collection.
     * @path /events/{eventId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for event management.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to careers collection.
     * @path /careers/{careerId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for career management.
     */
    match /careers/{careerId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to feedback collection. Allows listing and getting all feedback.
     *              Only admins can create, update or delete feedback entries.
     * @path /feedback/{feedbackId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for feedback management, but allows public reading.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to homepageSections collection.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list) If true for public reading. (create, update, delete) If user is an admin.
     * @deny (create, update, delete) If user is not an admin.
     * @principle Enforces admin-only write access for homepage section management.
     */
    match /homepageSections/{homepageSectionId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow create: If the authenticated user's ID matches the document ID.
     * @allow get, update, delete: If the authenticated user is an admin.
     * @deny create: If the authenticated user's ID does not match the document ID.
     * @deny get, update, delete: If the authenticated user is not an admin.
     * @principle Implements role-based access control using document existence as the indicator.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}