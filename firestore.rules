/**
 * @file Firestore Security Rules for AISolutions Hub Showcase
 * @core_philosophy This ruleset provides public read access to most collections while strictly controlling write access to administrators only. Testimonials can be created by any user, but modification/deletion is admin-only.
 * @data_structure The Firestore database contains several top-level collections: services, projects, articles, gallery, events, careers, testimonials, homepageSections, and roles_admin. Each collection stores data related to its respective entity.
 * @key_security_decisions
 *   - Public read access is granted to services, projects, articles, gallery, events, careers, and homepageSections.
 *   - Only authenticated admins can create, update, or delete documents in the main collections.
 *   - Testimonials collection allows create requests for all users, but update and delete requests are restricted to admins.
 *   - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to service details, but restricts writes to admins.
     * @path /services/{serviceId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to project details, but restricts writes to admins.
     * @path /projects/{projectId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to article details, but restricts writes to admins.
     * @path /articles/{articleId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to gallery item details, but restricts writes to admins.
     * @path /gallery/{galleryItemId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to event details, but restricts writes to admins.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to career details, but restricts writes to admins.
     * @path /careers/{careerId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to testimonials, allows anyone to create, but restricts update/delete to admins.
     * @path /testimonials/{testimonialId}
     * @allow (get, list): if true
     * @allow (create): if true;
     * @allow (update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Allows anyone to create a testimonial, but restricts modification and deletion to authenticated admins.
     */
    match /testimonials/{testimonialId} {
      allow get, list, create: if true;
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to homepage section configurations, but restricts writes to admins.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list): if true
     * @allow (create, update, delete): if request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (create): if request.auth == null
     * @deny (update): if request.auth == null
     * @deny (delete): if request.auth == null
     * @principle Grants public read access and restricts write access to authenticated admins.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Checks if the user has admin privileges.
     * @path /roles_admin/{userId}
     * @allow get: if request.auth.uid == userId;
     * @allow list: if false;
     * @allow create: if request.auth.uid == userId;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Only the authenticated user can check if they are an admin. No one can list admins.
     */
    match /roles_admin/{userId} {
      allow get, create: if isOwner(userId);
      allow list, update, delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}