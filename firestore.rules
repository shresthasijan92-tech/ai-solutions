/**
 * @fileoverview Firestore Security Rules for AISolutions Hub.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system, primarily leveraging the `/roles_admin/{userId}` collection to grant administrative privileges.  Data is generally locked down, requiring admin access for modification. Public read access is granted where appropriate, such as for testimonials (`/feedback`) that have been approved.
 *
 * Data Structure:
 * - `/services/{serviceId}`: Stores service details.
 * - `/projects/{projectId}`: Stores project details.
 * - `/articles/{articleId}`: Stores article details.
 * - `/gallery/{galleryItemId}`: Stores gallery items.
 * - `/events/{eventId}`: Stores event details.
 * - `/careers/{careerId}`: Stores career opportunities.
 * - `/feedback/{feedbackId}`: Stores user feedback; the `approved` field controls public visibility.
 * - `/homepageSections/{homepageSectionId}`: Stores homepage section configurations.
 * - `/roles_admin/{userId}`:  Grants admin privileges. Document existence confers admin status.
 *
 * Key Security Decisions:
 * - Admin Privileges: Determined by the presence of a document in the `/roles_admin/{userId}` collection.
 * - Public Read Access: Granted to `/feedback` for approved testimonials only (controlled via the `approved` field).
 * - No User Listing: Listing of users is disallowed.
 * - Strict Write Control: All write operations (create, update, delete) require admin privileges, enforced via the `isAdmin()` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @principle Requires authentication for certain actions.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @principle Enforces role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants read access to approved feedback.  Requires admin for modifications.
     * @path /feedback/{feedbackId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Public read for approved testimonials; admin-only writes.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to service details.
     * @path /services/{serviceId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for service management.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to project details.
     * @path /projects/{projectId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for project management.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to article details.
     * @path /articles/{articleId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for article management.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to gallery item details.
     * @path /gallery/{galleryItemId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for gallery management.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to event details.
     * @path /events/{eventId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for event management.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to career details.
     * @path /careers/{careerId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for career management.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants admin access to homepage section configurations.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle Admin-only access for homepage configuration.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to admin role assignment. Only allows creating the admin role document for the currently authenticated user.
     * @path /roles_admin/{userId}
     * @allow create: if request.auth.uid == userId && !exists(/databases/$(database)/documents/roles_admin/$(userId));
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow update, delete: if false;
     * @deny create: if request.auth.uid != userId || exists(/databases/$(database)/documents/roles_admin/$(userId));
     * @principle Only the user themselves can request admin access, and only if they are not already an admin. Admins can view the admin list. No updating or deleting.
     */
    match /roles_admin/{userId} {
        allow get, list: if isAdmin();
        allow create: if request.auth.uid == userId && !exists(/databases/$(database)/documents/roles_admin/$(userId));
        allow update, delete: if false;
    }
  }
}