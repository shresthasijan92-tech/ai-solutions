/**
 * @fileOverview Firestore Security Rules for AISolutions Hub.
 *
 * Core Philosophy:
 * This ruleset provides public read access to all top-level collections while restricting write access to administrators only.
 * User-submitted feedback is allowed via the `/testimonials` collection.
 *
 * Data Structure:
 * The database consists of several top-level collections: `/services`, `/projects`, `/articles`, `/gallery`, `/events`, `/careers`, `/testimonials`, and `/homepageSections`.
 * Admin privileges are determined by the existence of a document in the `/roles_admin/{uid}` collection.
 *
 * Key Security Decisions:
 * - Public read access for all top-level collections.
 * - Only authenticated administrators can create, update, or delete documents in most collections.
 * - Any authenticated user can create a testimonial, but only admins can modify or delete them.
 * - Listing of documents is generally allowed for all collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows reading if true.
     * @path /services/{serviceId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /projects/{projectId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /articles/{articleId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /gallery/{galleryItemId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /events/{eventId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /careers/{careerId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true. Allows any signed in user to create a testimonial. Only admin can update or delete.
     * @path /testimonials/{testimonialId}
     * @allow (get, list) User is unauthenticated.
     * @allow (create) User is authenticated.
     * @deny (update, delete) User is not an admin.
     * @principle Public read access, authenticated user creation, admin-only updates/deletes.
     */
    match /testimonials/{testimonialId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Allows reading if true.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list) User is unauthenticated.
     * @deny (create, update, delete) User is not an admin.
     * @principle Public read access, admin-only writes.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows read, create, update, delete if userId is the same as request.auth.uid and isSignedIn.
     * @path /roles_admin/{userId}
     * @allow (get, list, create, update, delete) User is signed in and userId matches auth.uid.
     * @deny (get, list, create, update, delete) User is not signed in or userId does not match auth.uid.
     * @principle User can only manage their own admin role.
     */
    match /roles_admin/{userId} {
      allow get, list, create, update, delete: if isSignedIn() && request.auth.uid == userId;
    }
  }
}