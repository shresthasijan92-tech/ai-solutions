/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for the AISolutions Hub application, with a focus on admin-controlled content and publicly readable data.
 *
 * Core Philosophy:
 *  - Strict role-based access control using the `/roles_admin/{userId}` collection.
 *  - Data is generally readable, but write access is restricted to admins.
 *  - Explicitly deny any potentially insecure or ambiguous access.
 *
 * Data Structure:
 *  - Top-level collections: `/services`, `/projects`, `/articles`, `/gallery`, `/events`, `/careers`, `/feedback`, `/homepageSections`.
 *  - Admin role assignments: `/roles_admin/{userId}`.
 *
 * Key Security Decisions:
 *  - Only users listed in `/roles_admin/{userId}` can create, update, or delete documents in the main content collections.
 *  - Public read access is granted for all collections EXCEPT `/roles_admin`.
 *  - The `approved` field in the `/feedback` collection is not directly used in the security rules (but could be used in the application logic to filter data).
 *  - Listing users in `/roles_admin` is not permitted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the /roles_admin/{userId} document.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document (used for /roles_admin/{userId}).
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }

    /**
     * @description Rules for the /services collection.
     * @path /services/{serviceId}
     * @allow (get, list): Any user can read service details.
     * @allow (create, update, delete): Only admins can modify service details.
     * @deny (create, update, delete): Non-admins cannot modify service details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /services/{serviceId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /projects collection.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project details.
     * @allow (create, update, delete): Only admins can modify project details.
     * @deny (create, update, delete): Non-admins cannot modify project details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /articles collection.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read article details.
     * @allow (create, update, delete): Only admins can modify article details.
     * @deny (create, update, delete): Non-admins cannot modify article details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /articles/{articleId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /gallery collection.
     * @path /gallery/{galleryItemId}
     * @allow (get, list): Any user can read gallery item details.
     * @allow (create, update, delete): Only admins can modify gallery item details.
     * @deny (create, update, delete): Non-admins cannot modify gallery item details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /gallery/{galleryItemId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /events collection.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event details.
     * @allow (create, update, delete): Only admins can modify event details.
     * @deny (create, update, delete): Non-admins cannot modify event details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /careers collection.
     * @path /careers/{careerId}
     * @allow (get, list): Any user can read career details.
     * @allow (create, update, delete): Only admins can modify career details.
     * @deny (create, update, delete): Non-admins cannot modify career details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /careers/{careerId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /feedback collection.
     * @path /feedback/{feedbackId}
     * @allow (get, list): Any user can read feedback details.
     * @allow create: if isSignedIn();
     * @allow update, delete: if isAdmin();
     * @deny (create, update, delete): Non-admins cannot modify feedback details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /homepageSections collection.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list): Any user can read homepage section details.
     * @allow (create, update, delete): Only admins can modify homepage section details.
     * @deny (create, update, delete): Non-admins cannot modify homepage section details.
     * @principle Role-based access control; Public read, admin-only write.
     */
    match /homepageSections/{homepageSectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin collection.
     * @path /roles_admin/{userId}
     * @allow create: if isOwner(userId); // Only the user themselves can create their admin role document.
     * @allow get: if isOwner(userId) || isAdmin(); // Only the user themselves can read their admin role document, or an admin.
     * @allow update: if isExistingOwner(userId); // Only the user themselves can update their admin role document.
     * @allow delete: if isExistingOwner(userId); // Only the user themselves can delete their admin role document.
     * @deny list: if true; // No one can list the admin roles.
     * @principle Ownership and role-based access control; Only users can manage their own admin role; prevents unauthorized listing.
     */
    match /roles_admin/{userId} {
        allow get: if isOwner(userId) || isAdmin();
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }
}