/**
 * @fileoverview Firestore Security Rules for AISolutions Hub.
 *
 * Core Philosophy:
 * This ruleset provides public read access to most collections while restricting write access to administrators.
 * User-generated content (feedback) can be created by any signed-in user, but only administrators can modify or delete it.
 *
 * Data Structure:
 * - Top-level collections: /services, /projects, /articles, /gallery, /events, /careers, /testimonials, /homepageSections, /roles_admin
 * - Admin privileges: Granted by the existence of a document in /roles_admin/{userId}.
 *
 * Key Security Decisions:
 * - Public read access is granted to most collections for wider accessibility.
 * - Administrator privileges are checked via the existence of a document in the `/roles_admin/{userId}` collection.
 * - Testimonials can be created by any signed-in user but only modified/deleted by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an administrator based on the existence of a document in /roles_admin/{userId}.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces administrator privileges for write operations.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for the /services collection. Allows public read access and restricts write access to admins.
     * @path /services/{serviceId}
     * @allow (get, list) - Any user can read service details.
     * @allow (create, update, delete) - Only admins can create, update, or delete services. User with admin role creates a service.
     * @deny (create, update, delete) - Non-admin user attempts to modify service details.
     * @principle Enforces administrator-only writes for service data.
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /projects collection. Allows public read access and restricts write access to admins.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project details.
     * @allow (create, update, delete) - Only admins can create, update, or delete projects.
     * @deny (create, update, delete) - Non-admin user attempts to modify project details.
     * @principle Enforces administrator-only writes for project data.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /articles collection. Allows public read access and restricts write access to admins.
     * @path /articles/{articleId}
     * @allow (get, list) - Any user can read article details.
     * @allow (create, update, delete) - Only admins can create, update, or delete articles.
     * @deny (create, update, delete) - Non-admin user attempts to modify article details.
     * @principle Enforces administrator-only writes for article data.
     */
    match /articles/{articleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /gallery collection. Allows public read access and restricts write access to admins.
     * @path /gallery/{galleryItemId}
     * @allow (get, list) - Any user can read gallery item details.
     * @allow (create, update, delete) - Only admins can create, update, or delete gallery items.
     * @deny (create, update, delete) - Non-admin user attempts to modify gallery item details.
     * @principle Enforces administrator-only writes for gallery data.
     */
    match /gallery/{galleryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /events collection. Allows public read access and restricts write access to admins.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event details.
     * @allow (create, update, delete) - Only admins can create, update, or delete events.
     * @deny (create, update, delete) - Non-admin user attempts to modify event details.
     * @principle Enforces administrator-only writes for event data.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /careers collection. Allows public read access and restricts write access to admins.
     * @path /careers/{careerId}
     * @allow (get, list) - Any user can read career details.
     * @allow (create, update, delete) - Only admins can create, update, or delete career opportunities.
     * @deny (create, update, delete) - Non-admin user attempts to modify career details.
     * @principle Enforces administrator-only writes for career data.
     */
    match /careers/{careerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /testimonials collection. Allows public read access, user create access, and restricts update/delete access to admins.
     * @path /testimonials/{testimonialId}
     * @allow (get, list) - Any user can read testimonial details.
     * @allow (create) - Any signed-in user can create a testimonial.
     * @allow (update, delete) - Only admins can update or delete testimonials.
     * @deny (update, delete) - Non-admin user attempts to modify testimonial details.
     * @principle Allows user-submitted testimonials with admin-controlled moderation.
     */
    match /testimonials/{testimonialId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /homepageSections collection. Allows public read access and restricts write access to admins.
     * @path /homepageSections/{homepageSectionId}
     * @allow (get, list) - Any user can read homepage section details.
     * @allow (create, update, delete) - Only admins can create, update, or delete homepage sections.
     * @deny (create, update, delete) - Non-admin user attempts to modify homepage section details.
     * @principle Enforces administrator-only writes for homepage section configurations.
     */
    match /homepageSections/{homepageSectionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rule for the /roles_admin collection.  This path controls admin privileges.  Only a user matching the document ID can create this document.  No updates or deletes are allowed through the API (admin roles can only be created through a separate, secure mechanism.)
     * @path /roles_admin/{userId}
     * @allow (create) - Only the user with matching ID can create their own admin role document.
     * @deny (get, list, update, delete) - No user can get, list, update, or delete any of the documents under this collection.
     * @principle Grants admin privileges based on document existence; only the user can create it.
     */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if false;
      allow delete: if false;
    }
  }
}